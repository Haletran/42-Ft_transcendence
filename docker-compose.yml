services:
  reverseproxy:
    #    build: src/reverseproxy/.
    image: nginx:latest
    container_name: reverseproxy
    networks:
      - transcendence
    ports:
      - "443:443"
    volumes:
      - ./src/reverseproxy/conf/core.conf:/etc/nginx/conf.d/core.conf # location of static content:
      - ./src/reverseproxy/static-content:/var/www/html
      - ./src/reverseproxy/ssl/nginx.crt:/etc/nginx/ssl/nginx.crt
      - ./src/reverseproxy/ssl/nginx.key:/etc/nginx/ssl/nginx.key
    depends_on:
      - django-credentials

  # hardhat:
  #   build:
  #     context: ./src/crypto/.
  #   container_name: hardhat
  #   env_file:
  #     - .env
  #   ports:
  #     - "8545:8545"
  #   volumes:
  #     - ./src/crypto/.:/usr/src/app
  #   networks:
  #     - transcendence
  #   command: npx hardhat node

  vault:
    image: hashicorp/vault:latest
    container_name: vault_container
    ports:
      - "8200:8200"
    volumes:
      - ./src/vault/config:/vault/config
      #- ./vault/policies:/vault/policies
      - ./src/vault/data:/vault/data
    env_file:
      - .env
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_API_ADDR=http://0.0.0.0:8200
      - VAULT_ADDRESS=http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    networks:
      - transcendence
    command: /bin/sh -c "vault server -config=/vault/config/vault.json & sleep 1 && ./vault/config/unseal.sh && tail -f /dev/null"

  #LOGIN/REGISTER

  django-credentials:
    build: src/django-credentials/.
    container_name: django-credentials
    ports:
      - "9000:9000"
    volumes:
      - ./src/django-credentials/ssl/django-credentials.key:/etc/ssl/private/django.key
      - ./src/django-credentials/ssl/django-credentials.crt:/etc/ssl/certs/django.crt
    env_file:
      - .env
    environment:
      VAULT_ADDR: 'http://vault_container:8200' # Vault service name here
    depends_on:
      - database
    networks:
      - transcendence
    command: >
      sh -c "sleep 8 && python3 manage.py makemigrations && python manage.py makemigrations my_auth && python3 manage.py migrate && gunicorn --bind 0.0.0.0:9000 credentials.wsgi:application"

  database:
    image: postgres:latest
    container_name: credentials-database
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - credentials_data:/var/lib/postgresql/data
    networks:
      - transcendence

  # FRIENDS

  django-friends:
    build: src/django_friends/.
    container_name: django-friends
    ports:
      - "9001:9000"
    depends_on:
      - friends-database
    networks:
      - transcendence
    command: >
      sh -c "sleep 8 && python3 manage.py makemigrations && python3 manage.py migrate && gunicorn --bind 0.0.0.0:9000 django_friends.wsgi:application"

  friends-database:
    image: postgres:latest
    container_name: friends-database
    ports:
      - "5433:5432"
    volumes:
      - friends_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: friends_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    networks:
      - transcendence

  #CHAT

  django-chat:
    build: src/django_chat/.
    container_name: django-chat
    ports:
      - "9002:9000"
    depends_on:
      - chat-database
    networks:
      - transcendence
    command: >
      sh -c "sleep 8 && python3 manage.py makemigrations && python3 manage.py migrate && gunicorn --bind 0.0.0.0:9000 django_chat.wsgi:application"

  chat-database:
    image: postgres:latest
    container_name: chat-database
    ports:
      - "5434:5432"
    volumes:
      - chat_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: chat_db
      POSTGRES_USER: chat_user
      POSTGRES_PASSWORD: chat_password
    networks:
      - transcendence

volumes:
  dblogins:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './data/dblogins'
  credentials_data:
  friends_data:
  chat_data:


networks:
  transcendence:
    driver: bridge
