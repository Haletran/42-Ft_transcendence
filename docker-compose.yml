services:
  reverseproxy:
    #    build: src/reverseproxy/.
    image: nginx:latest
    container_name: reverseproxy
    networks:
      - transcendence
    ports:
      - "443:443"
    volumes:
      - ./src/reverseproxy/conf/core.conf:/etc/nginx/conf.d/core.conf
        # location of static content:
      - ./src/reverseproxy/static-content:/var/www/html
      - ./src/reverseproxy/ssl/nginx.crt:/etc/nginx/ssl/nginx.crt
      - ./src/reverseproxy/ssl/nginx.key:/etc/nginx/ssl/nginx.key
    depends_on:
      - django-credentials

  database:
    image: postgres:latest
    container_name: postgres-db
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - transcendence

  vault:
    image: hashicorp/vault:latest
    container_name: vault_container
    ports:
      - "8200:8200"
    volumes:
      - ./src/vault/config:/vault/config
      #- ./vault/policies:/vault/policies
      - ./src/vault/data:/vault/data
    env_file:
      - .env
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_API_ADDR=http://0.0.0.0:8200
      - VAULT_ADDRESS=http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    networks:
      - transcendence
    command: /bin/sh -c "vault server -config=/vault/config/vault.json & sleep 3 && ./vault/config/unseal.sh && tail -f /dev/null"

  django-credentials:
    build: src/django-credentials/.
    container_name: django-credentials
    ports:
      - "9000:9000"
    volumes:
      - ./src/django-credentials/ssl/django-credentials.key:/etc/ssl/private/django.key
      - ./src/django-credentials/ssl/django-credentials.crt:/etc/ssl/certs/django.crt
        # - src/django-credentials/credentials:/app
    env_file:
      - .env
    environment:
      VAULT_ADDR: 'http://vault_container:8200'  # Vault service name here
    depends_on:
      - database
    networks:
      - transcendence
    command: >
      sh -c "sleep 5 && python3 manage.py makemigrations && python manage.py makemigrations my_auth && python3 manage.py migrate && gunicorn --bind 0.0.0.0:9000 credentials.wsgi:application"
  
volumes:
  dblogins:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './data/dblogins'
  postgres_data:

networks:
  transcendence:
    driver: bridge
